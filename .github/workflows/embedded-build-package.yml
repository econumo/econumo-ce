on:
  workflow_call:
    inputs:
      REGISTRY:
        required: true
        type: string
        default: 'docker.io'
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_TAGS:
        required: true
        type: string
        description: 'Comma-separated list of tags (e.g., "latest,1.0.0,1.0")'
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      BUILD_USER_TOKEN:
        required: true

jobs:
  build-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Build Configurations Repository
        uses: actions/checkout@v4
        with:
          repository: econumo/build-configuration
          ref: main
          token: ${{ secrets.BUILD_USER_TOKEN }}
          path: build

      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: econumo/econumo-backend
          ref: main
          token: ${{ secrets.BUILD_USER_TOKEN }}
          path: backend

      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: econumo/econumo-ce-frontend
          ref: main
          token: ${{ secrets.BUILD_USER_TOKEN }}
          path: frontend

      - name: Clean Unnecessary Folders
        run: |
          rm -rf frontend/.git
          rm -rf backend/.git
          rm -rf build/.git

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ inputs.REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Prepare Docker Image Tags
        id: prep
        run: |
          TAGS=""
          IFS=',' read -ra TAG_ARRAY <<< "${{ inputs.IMAGE_TAGS }}"
          for tag in "${TAG_ARRAY[@]}"; do
            IMAGE_TAG="${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${tag}"
            if [ -n "$TAGS" ]; then
              TAGS="${TAGS},"
            fi
            TAGS="${TAGS}${IMAGE_TAG}"
          done
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and Push Multi-Arch Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          pull: true
          file: build/docker/app/Dockerfile
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=registry,ref=${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64
